Working on - 3 BUGS 
Bug 1 - Console Error on Dates DDL - this may resolve BUG2 aswell , also on Edit participant
Bug 3 - Edit Participant list is incorrect , it has users bookings that are not linked to that booking , i think we need if the user clicks out of the Create a booking then it clears the previous enter data which
BUG 2 - Booking a Camp , once payment is successful it is not sending the user back to the Dashboard
Bug 4 - Make selecting a Participant a required field , must select at least 1 participant
REMAP Refund process 



// MyBookings Frontend . needd to fix , step by step add the code in to understand and add comments
// onpress on View container if a button is TouchableOpacity and a view contaimner





--------


Images  on Home
FRONT END - if there is no discount it just has % so we need it to not appear or 0%

Need a redirect if the user cancels Process of payment so doest enter details

Things to tidy up , replace all buttons so that onPress is on the TouchableOpacity not the text + remove console.logs

ANDROID FULL TEST - Date TIME picker and dropdown CHecks , some componets might not work .

Terms and conditions  - ON SIGN UP SCREEN

DESIGN WORK - need to create a list



--------------------------==


      {/* Add the bottom tabs */}
      {/* <Tab.Navigator initialRouteName={isLoggedIn ? 'DashboardCRM' : 'Home'}  */}
     
     
         {/* Render Dashboard screen if logged in */}
      <Tab.Navigator
          screenOptions={({ route }) => ({
              tabBarIcon: ({ color, size }) => {
                let iconName;

                if (route.name === 'Home') {
                  iconName = 'home';
                } 
                else if (route.name === 'Login') {
                  iconName = 'log-in';
                }
                else if (route.name === 'Sign Up') {
                  iconName = 'person-add-sharp';
                } 
                else if (route.name === 'Logout') {
                  iconName = 'person-add-sharp';
                } 
                else if (route.name === 'DashboardCRM') {
                  iconName = 'home';
                } 


                // Return the icon component
                return <Ionicons name={iconName} size={size} color={color} />;
              },
            })}
            tabBarOptions={{
              activeTintColor: 'blue',
              inactiveTintColor: 'gray',
            }}
        >

  
        {/* Render Dashboard screen if logged in */}
        {isLoggedIn ? (
          <>
          <Tab.Screen
            name="DashboardCRM"
            component={DashboardCRM}
            options={{
              // Set icon for Dashboard tab
              tabBarIcon: ({ color, size }) => (
                <Ionicons name="home" size={size} color={color} />
              ),
            }}
          />  
            <Tab.Screen
            name="Home"
            component={Home}
            options={{
              tabBarIcon: ({ color, size }) => (
                <Ionicons name="log-out" size={size} color={color} />
              ),
            }}
            listeners={{
              tabPress: () => handleLogout(),
            }}
          />
          </>
        ) : (
          // Render Login and SignUp screens if not logged in
          <>
           <Tab.Screen
          name="Home"
          component={Home}
          options={{
            // Set icon for Home tab
            tabBarIcon: ({ color, size }) => (
              <Ionicons name="home" size={size} color={color} />
            ),
          }}
        />
            <Tab.Screen name="Login" component={Login} />
            <Tab.Screen name="Sign Up" component={SignUp} />
          </>
        )}

  
      </Tab.Navigator>

-----------------------------------------------------------------

TASKS TO DO
Stripe API key needs to be in ENV



Notifications
IF USER has booked >= 2 CAMPS THEN -> 
USER is eligible for Jumper -> Notify Admin / highlight person on attendance

is there a way to create custom bar , Notification Bar?  


------------
Notifications - PUSHING THIS BACK TO THE END as needs ios Dev program(PAID)




// CHEAT MODE -  WITH OFFERS - NEED to DISCUSS THIS 
IF user books 4 camps and then books one camp as its now 50 % off 
and then decides ok ill request Refund the other 4- I think its up to ADmin to 
spot this but the odds of this happening 

------------

NOTES of things todo / research 

 CRM Book / PaymentStripe
 -- GO live CheckList - Research 

--------
FUTURE DEV WORK
 Calander - FUTURE development
Edit a Offer is not possible yet - FUTURE development





Dropdown option - Choose a person then we delete that record as with the above option we cant determine which particpants record. 

Full refund Button -> Send a Notification Record to the ADMIN -> ADMIN Then logs in and can see the requests and 
then they must go onto Stripe to refund. 

---


  <NavigationContainer>
        <Stack.Navigator initialRouteName={isLoggedIn ? 'DashboardCRM' : 'Home'}>
        <Stack.Screen name="Home" component={Home} />
        <Stack.Screen name="Login" component={Login} />
        <Stack.Screen name="SignUp" component={SignUp} />
        <Stack.Screen name="DashboardCRM" component={DashboardCRM} />
        <Stack.Screen name="CreateBooking" component={CreateBooking} />
        <Stack.Screen name="MyBookings" component={MyBookings} />
        <Stack.Screen name="DashboardAdmin" component={DashboardAdmin} />
        <Stack.Screen name="ManageBookings" component={ManageBookings} />
        <Stack.Screen name="CreateAnEvent" component={CreateAnEvent} />
        <Stack.Screen name="CreateAnOffer" component={CreateAnOffer} />
        <Stack.Screen name="CreateCamp" component={CreateCamp} />
        <Stack.Screen name="CreateEventBooking" component={CreateEventBooking} />
      </Stack.Navigator>



    </NavigationContainer>


---------------------
ADD STRIPE API KEY TO PROCESS ENV UPDATE CODE 
CRM - Manage Booking / Cancel / refund

Fix Create camp Front end 

CRM - Previous booking - Request refund button - send Notification to Admin 

Any REQUIRED FIeLDS ON CREATEBOOKING  - Contact number?

booking Detials -

Notifications
API keys and MongoDB needs protected in env 

Ability to view all particants in that CAMp that have booked and click on their profile to see contact detials if needed.

Auth routes 
unauth Routes 

CLear console logs of JWT token 

----
SIGN UP - CUSTOMER



----
Make BOOKING   / Checkout questions  - (CRM ONLY)
Has your child have any disablities or alergies ** State 
we do not store allegies / disablities only until the event / camp is over.
      //Update Array with record  - We will not be updating the DB until after the payment?? 

-----

Manage bookings (ADMIN ONLY)

Edit Camp / Event - Need to maintain Time and date and price all values and the user has the option to edit whatever so i think we will be PUT all 
Delete Camp / Event - DONE

------


Add to BASKET and return back later or just have it for now just have to reenter?



Logout Button



------
Admin View  -- 

This where they will be able to add / Delete upcoming events and add Payment links with Stripe
Create event
Create a Camp  
Manage bookings 

Test needed on Andriod to confirm that all modules work on Andriod/ ios / web - mainly the date picker
Andriod date time not sure if working or coded right , will need to test
Handlesubmit within createcamp is only tested in ios unsure about Andriod yet 
------



put MongoDB URL in .env file 






Knowledge of the app / Workings 

Stripe
NEED TO PUT KEYS IN ENV file , cant get it working at the min


Refunds can be processed on the Stripe Application - To be tested
We can implement refunds on the app but that could be a future feature / Release 
For now i think we could have it that the User can see previous Camps / Events within the last X days 
and then request a refund then the business would log in and see the nofication and go on the Stripe application and process
how do we tell the outcome - Notifications ?  


refunds


APPLE PAY SETUP - SO THIS WILL ONLY BE ABLE TO ACCESSed when we get a merchantID , We will first do card only as this is main form and also Dev Program is Â£99 and i was having issues getting this setup we will fix this in the future 

Merchant ID 
If your app is being built for a specific client and they will take over the app once it's live, you have a couple of options regarding the Apple Merchant ID:

You Keep Ownership, But Integrate with Their Stripe Account: If you continue to own and maintain the app on behalf of the client, you can keep your Apple Merchant ID and integrate with the client's Stripe account. In this scenario, the client provides you with their Stripe publishable key and other necessary credentials, and you update the Stripe configuration in your app accordingly.
Client Assumes Full Ownership: If the client will assume full ownership of the app, including the Apple Developer account and any related credentials, they will need to create their own Apple Merchant ID and integrate with their own Stripe account. Once they have their own credentials, they will need to update the Stripe configuration in the app before taking it live.
The approach you choose depends on the agreement with your client and how ownership and maintenance of the app are being structured. It's essential to clarify this with your client and determine the best course of action before deploying the app live.


publishableKey: This is your Stripe publishable key, which you get from your Stripe Dashboard. It's used to identify your account with Stripe and authenticate API requests from your app. This is required for integrating with Stripe.
merchantIdentifier: This is an identifier provided by Apple when you set up Apple Pay in your Stripe account. It's used to configure Apple Pay for your app. If you're not setting up Apple Pay, you can omit this property or set it to undefined.
urlScheme: This is a custom URL scheme for your app, which is used for deep linking and handling redirects. You can set this to a unique value for your app (e.g., your-app-name://), but it's optional unless you're setting up Apple Pay.



---
CREATE A CAMP - Admin ONLY



---

TESTING PAYMENTS 
GO LIVE CHECKLIST
https://docs.stripe.com/development/checklist

PAYMENT METHOD	SCENARIO	HOW TO TEST

Credit card	The card payment succeeds and doesnât require authentication.	Fill out the credit card form using the credit card number 4242 4242 4242 4242 with any expiration, CVC, and postal code.
Credit card	The card payment requires authentication.	Fill out the credit card form using the credit card number 4000 0025 0000 3155 with any expiration, CVC, and postal code.
Credit card	The card is declined with a decline code like insufficient_funds.	Fill out the credit card form using the credit card number 4000 0000 0000 9995 with any expiration, CVC, and postal code.
Credit card	The UnionPay card has a variable length of 13-19 digits.	Fill out the credit card form using the credit card number 6205 500 0000 0000 0004 with any expiry date, CVC, and postal code.



--

import React, { useEffect, useState } from 'react';
import { ScrollView,StyleSheet, View, TextInput, Button, Text, TouchableOpacity, Modal,FlatList, Alert } from 'react-native';
import validator from 'validator';
import { useNavigation } from '@react-navigation/native';
import AsyncStorage from '@react-native-async-storage/async-storage';

import DropDownPicker from 'react-native-dropdown-picker';



const MyBookings = ({ navigation }) => {

      const [isLoggedIn, setIsLoggedIn] = useState(false);
      const [bookingData, setBookingData] = useState([]);
      const [campData, setCampData] = useState([]);
      const [eventData, setEventData] = useState([]);
      const [bookingCampData, setBookingCampData] = useState([]);
      const [bookingEventData, setBookingEventData] = useState([]);
      const [refundReason , setRefundReason] = useState('');

      const [isEvent, setEvent] = useState(false);
      
      const [selectedParticipants, setSelectedParticipantsArray] = useState([]);

      const [bookingDetailsModalVisible, setBookingDetailsVisibleModal] = useState(false);
      const [bookingEventDetailsModalVisible, setBookingEventDetailsVisibleModal] = useState(false);



      // View Bookings - Camps and Events
      const [viewCampBookings, setViewCampBookings] = useState(false);
      const [viewEventBookings, setViewEventBookings] = useState(false);


      // Refund Modals Variables- Options          
      const [refundReasonErrorMessage , setRefundReasonErrorMessage] = useState('');
      const [refundModalVisible, setRefundModalVisible] = useState(false);
      const [refundEventModalVisible, setRefundEventModalVisible] = useState(false);

      //Refund Confirmation Modal variables - Open / Close
  
      const [refundCampFullRefundConfirmationModalVisible, setRefundCampFullConfirmationModalVisible] = useState(false);
      const [refundEventFullRefundConfirmationModalVisible, setRefundEventFullConfirmationModalVisible] = useState(false);

      const [refundCampPartialRefundConfirmationModalVisible, setRefundCampPartialConfirmationModalVisible] = useState(false);
      const [refundEventPartialRefundConfirmationModalVisible, setRefundEventPartialConfirmationModalVisible] = useState(false);



      useEffect(() => {


        const checkAuthentication = async () => {
          try {
            const jwtToken = await AsyncStorage.getItem('jwtToken');
            setIsLoggedIn(!!jwtToken);
    
          
          } catch (error) {
            console.error('Error fetching JWT token:', error);
          }
        };
        const fetchData = async () => {
          try {
            const jwtToken = await AsyncStorage.getItem('jwtToken');
            setIsLoggedIn(!!jwtToken);
    
            // Fetch booking data
            const apiGetBookings = 'http://localhost:3000/api/getBookingRecords';
            const bookingsResponse = await fetch(apiGetBookings, {
              method: 'GET',
              headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${jwtToken}`,
              },
            });
            if (!bookingsResponse.ok) {
              Alert.alert("You do not have any bookings.")
              //throw new Error('Network response was not ok');
            }
            const bookingData = await bookingsResponse.json();
            setBookingData(bookingData);
          


          
    
            // Fetch and process camp data
            const apiGetCamps = 'http://localhost:3000/api/camps';
            const campsResponse = await fetch(apiGetCamps, {
              method: 'GET',
              headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${jwtToken}`,
              },
            });
           
            const campsData = await campsResponse.json();
            setCampData(campsData);



            // Fetch and process event data
            const apiGetEvent = 'http://localhost:3000/api/events';
            const eventResponse = await fetch(apiGetEvent, {
              method: 'GET',
              headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${jwtToken}`,
              },
            });
           
            const eventData = await eventResponse.json();
            setEventData(eventData);




            
          
            // Process booking data
            processBookings(bookingData, campsData ,eventData);
          } catch (error) {
              //Error Fetching

               // throw new Error('Network response was not ok');
              
          }
        };
    
        fetchData(); // Fetch data when component mounts
      }, []);
    
      const processBookings = (bookingData, campData, eventData) => {
        const currentDate = new Date(); // Get current date
    
        // Filter and process camp data
        const futureCamps = campData.filter(camp => {
            const campStartDate = new Date(camp.startDate);
            return campStartDate > currentDate;
        });
        setCampData(futureCamps);
    
        // Filter and process event data
        const futureEvents = eventData.filter(event => {
            const eventStartDate = new Date(event.startDate);
            return eventStartDate > currentDate;
        });
        setEventData(futureEvents);
    
        // Extract unique camp IDs from bookingData for future camps
        const uniqueCampIDs = Array.from(new Set(bookingData
            .filter(item => item.bookingType === 'Camp' && futureCamps.some(camp => camp._id === item.campID))
            .map(item => item.campID)));
    
        // Extract unique event IDs from bookingData for future events
        const uniqueEventIDs = Array.from(new Set(bookingData
            .filter(item => item.bookingType === 'Event' && futureEvents.some(event => event._id === item.eventID))
            .map(item => item.eventID)));
    
        // Map over unique camp IDs to find corresponding camp objects
        const bookingCampData = uniqueCampIDs.map(campID => futureCamps.find(camp => camp._id === campID));
    
        // Map over unique event IDs to find corresponding event objects
        const bookingEventData = uniqueEventIDs.map(eventID => futureEvents.find(event => event._id === eventID));
    
        // Set the state with the processed bookingCampData and bookingEventData
        setBookingCampData(bookingCampData);
        setBookingEventData(bookingEventData);

    };

         // Function to close the modal 
         const openCampBookings = () => {
          setViewCampBookings(true);
    
        };

        // Function to close the modal 
        const openEventBookings = () => {
          setViewCampBookings(false);

  
       };
    
  //----- 

    // Function to close Camp Refund modal - (Options)
      const closeCampRefundModal = () => {
      setRefundModalVisible(false);

       //Clear DDL Array as we exit and reuse 
        
          // Now set the value back to an empty array
          setValue([]);
    };


     // Function to close the Event Refund Confirmation modal - (Options)
     const closeEventRefundModal = () => {
      setRefundEventModalVisible(false);
          //Clear DDL Array as we exit and reuse 
      setValue([]);
         
    };

// -------------

  // Close Event Refund Confirmation Modals ---------------------------------

  // Function to close the Full Refund Confirmation modal 

      const closeEventFullRefundConfirmationModal = () => {
        setRefundEventFullConfirmationModalVisible(false);

      };

      const closeEventPartialRefundConfirmationModal = () => {
        setPartialRefundEventConfirmationModalVisible(false);

      };
  
  // --------------------------------------------------------------------------


  //---------------------------------------------------------------------------


    // Close Camp Refund Confirmation Modals

      // Function to close the Full Refund Confirmation modal 
      const closeCampFullRefundConfirmationModal = () => {
        setRefundCampFullConfirmationModalVisible(false);

      };

       // Function to  close the Partial Refund Confirmation modal 
       const closeCampPartialRefundConfirmationModal = () => {
        setRefundCampPartialConfirmationModalVisible(false);
  
      };

    //---------------------------------------------------------------



    
    

      // Function to close the modal 
      const closeBookingDetailsModal = () => {
        setBookingDetailsVisibleModal(false);
  
      };

      // Function to close the modal 
      const closeBookingEventDetailsModal = () => {
        setBookingEventDetailsVisibleModal(false);
  
      };

      

      const openEventBookingDetailsModal = async(booking) => {
        setSelectedEventBookingRecord(booking); // Set the selected booking data in the state
        setBookingEventDetailsVisibleModal(true); // Open the modal
      };


    const openCampBookingDetailsModal = async(booking) => {
      setSelectedBookingRecord(booking); // Set the selected booking data in the state
      setBookingDetailsVisibleModal(true); // Open the modal
    };



    //CAMP - FULL REFUND ----- 
    const openCampFullRefundConfirmationModal = async() => {

      //Validation Check - Reason is a required Entry
      if(refundReason == "")
      {
        //Validation message 
        const reasonValidationMessage = "Please enter a reason"
        setRefundReasonErrorMessage(reasonValidationMessage);
      }
      else{

        if(value == [])
        {
          const reasonValidationMessage = "Please select at least 1 particant"
          setRefundReasonErrorMessage(reasonValidationMessage);
        } 
        else{

          setSelectedParticipantsArray(selectedBookingRecord.participantArray);

          setRefundModalVisible(false);
          setRefundCampFullConfirmationModalVisible(true); 

        }

      }

    };
//--------------------------------





// Partial Refund - Event Confirmaton
const openCampPartialRefundConfirmationModal = async() => {

  //Validation Check - Reason is a required Entry
  if(refundReason == "")
  {
    //Validation message 
    const reasonValidationMessage = "Please enter a reason"
    setRefundReasonErrorMessage(reasonValidationMessage);
  }
  else{

    if(value == [])
    {
      const reasonValidationMessage = "Please select at least 1 particant"
      setRefundReasonErrorMessage(reasonValidationMessage);
    } 
    else{


   

      setSelectedParticipantsArray(selectedBookingRecord.participantArray);

      setRefundModalVisible(false);
      setRefundCampPartialConfirmationModalVisible(true); 

      
    }

  }


};


// Full Refund - Event Confirmaton
    const openFullRefundEventConfirmationModal = async() => {

      //Validation Check - Reason is a required Entry
      if(refundReason == "")
      {
        //Validation message 
        const reasonValidationMessage = "Please enter a reason"
        setRefundReasonErrorMessage(reasonValidationMessage);
      }
      else{

        if(value == [])
        {
          const reasonValidationMessage = "Please select at least 1 particant"
          setRefundReasonErrorMessage(reasonValidationMessage);
        } 
        else{


       

          setSelectedParticipantsArray(selectedEventBookingRecord.participantArray);

          setRefundEventModalVisible(false);
          setRefundEventFullConfirmationModalVisible(true); 

          
        }

      }

 
    };



// Partial Refund - Event Confirmaton
const openPartialRefundEventConfirmationModal = async() => {

  //Validation Check - Reason is a required Entry
  if(refundReason == "")
  {
    //Validation message 
    const reasonValidationMessage = "Please enter a reason"
    setRefundReasonErrorMessage(reasonValidationMessage);
  }
  else{

    if(value == [])
    {
      const reasonValidationMessage = "Please select at least 1 particant"
      setRefundReasonErrorMessage(reasonValidationMessage);
    } 
    else{


   

      setSelectedParticipantsArray(selectedEventBookingRecord.participantArray);

      setRefundEventModalVisible(false);
      setRefundEventPartialConfirmationModalVisible(true); 

      
    }

  }


};


    const RequestCampRefundCancellationModalVisible = async(booking) => {
       
        setSelectedBookingRecord(booking);
        setRefundModalVisible(true);
    };

    const RequestEventRefundCancellationModalVisible = async(booking) => {
       
      setSelectedEventBookingRecord(booking);
      setRefundEventModalVisible(true);
  
  };



  const EventRequestFullRefund = async() => {

    setRefundEventFullConfirmationModalVisible(false);
    RequestedEventFullRefund();

  };


  const EventRequestPartialRefund = async() => {

    setRefundEventPartialConfirmationModalVisible(false);
    RequestEventPartialRefund();
  };



  const CampRequestFullRefund = async() => {

    setRefundCampFullConfirmationModalVisible(false);    
    RequestedCampFullRefund();

  };

  const CampRequestPartialRefund = async() => {

    setRefundCampPartialConfirmationModalVisible(false);
    RequestCampPartialRefund();

  };


// Event - Request Partial Refund
const RequestEventPartialRefund = async() => {


  //Validation Check - Reason is a required Entry
  if(refundReason == "")
  {
    //Validation message 
    const reasonValidationMessage = "Please enter a reason"
    setRefundReasonErrorMessage(reasonValidationMessage);
  }
  else{

    if(value == [])
    {
      const reasonValidationMessage = "Please select at least 1 particant"
      setRefundReasonErrorMessage(reasonValidationMessage);
    } 
    else{

      // Update Status so that it changes on the Record from Booked to Partial Refund Request Sent 
      // Update Person AttendanceStatus value 

        const jwtToken = await AsyncStorage.getItem('jwtToken');
        

              try {
                  const response = await fetch(`http://localhost:3000/api/updateBookingRecord/${selectedEventBookingRecord._id}`, {
                      method: 'PUT',
                      headers: {
                          'Content-Type': 'application/json',
                          'Authorization': `Bearer ${jwtToken}`,
                      },
                      body: JSON.stringify({
                        // Include the data you want to send in the body
                        // For example:
                        _id: selectedEventBookingRecord._id,
                        participantID: value,
                        reasonForRefund: refundReason
                        // Other properties...

                    })
                     
                  });


 // Notify Admin  HERE WHEN WE GET THE notifacatins ? ? 

              
                  const updatedRecord = await response.json();
                
                  if(updatedRecord == null)
                  {
                    setRefundModalVisible(true);
                  }
                  else{
                    
 
                    setRefundModalVisible(false);
                    navigation.navigate('DashboardCRM');
                  }

                  if (!response.ok) {
                    throw new Error('Failed to update booking record');
                  }
                  // Handle successful update
                } catch (error) {
                  console.error('Error updating booking record:', error);
                  // Handle error
                }

                
            
             
          }
            }
      }





// Camp - Request Partial Refund
      const RequestCampPartialRefund = async() => {


        //Validation Check - Reason is a required Entry
        if(refundReason == "")
        {
          //Validation message 
          const reasonValidationMessage = "Please enter a reason"
          setRefundReasonErrorMessage(reasonValidationMessage);
        }
        else{

          if(value == [])
          {
            const reasonValidationMessage = "Please select at least 1 particant"
            setRefundReasonErrorMessage(reasonValidationMessage);
          } 
          else{

            // Update Status so that it changes on the Record from Booked to Partial Refund Request Sent 
            // Update Person AttendanceStatus value 
  
              const jwtToken = await AsyncStorage.getItem('jwtToken');
              
          
                    try {
                        const response = await fetch(`http://localhost:3000/api/updateBookingRecord/${selectedBookingRecord._id}`, {
                            method: 'PUT',
                            headers: {
                                'Content-Type': 'application/json',
                                'Authorization': `Bearer ${jwtToken}`,
                            },
                            body: JSON.stringify({
                              // Include the data you want to send in the body
                              // For example:
                              _id: selectedBookingRecord._id,
                              participantID: value,
                              reasonForRefund: refundReason
                              // Other properties...

                          })
                           
                        });


       // Notify Admin  HERE WHEN WE GET THE notifacatins ? ? 
      
                    
                        const updatedRecord = await response.json();
                      
                        if(updatedRecord == null)
                        {
                          setRefundModalVisible(true);
                        }
                        else{
                          
       
                          setRefundModalVisible(false);
                          navigation.navigate('DashboardCRM');
                        }

                        if (!response.ok) {
                          throw new Error('Failed to update booking record');
                        }
                        // Handle successful update
                      } catch (error) {
                        console.error('Error updating booking record:', error);
                        // Handle error
                      }
    
                      
                  
                   
                }
                  }
            }


// CAMP - Request Full Refund
      const RequestedCampFullRefund = async() => { 



        if(refundReason == "")
        {
          //Validation message 
          const reasonValidationMessage = "Please enter a reason"
          setRefundReasonErrorMessage(reasonValidationMessage);
        }
        else{

              const selectedBookingTypeRecordID = `http://localhost:3000/api/fullRefundRequest/${selectedBookingRecord._id}`;

              // Update Status so that it changes on the Record from Booked to Full Refund Request Sent 
              // Update Person AttendanceStatus value 


        const jwtToken = await AsyncStorage.getItem('jwtToken');


            try {
                const response = await fetch(selectedBookingTypeRecordID, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${jwtToken}`,
                    },
                    body: JSON.stringify({
                      // Include the data you want to send in the body
                      // For example:
                      _id: selectedBookingTypeRecordID._id,
                      participantID: value,
                      reasonForRefund: refundReason
                      // Other properties...

                  })
                   
                });


// Notify Admin  HERE WHEN WE GET THE notifcations ? ? 

            
                const updatedRecord = await response.json();
              
                if(updatedRecord == null)
                {
                  setRefundModalVisible(true);
                }
                else{
                  

                  setRefundModalVisible(false);
                  navigation.navigate('DashboardCRM');
                }

                if (!response.ok) {
                  throw new Error('Failed to update booking record');
                }
                // Handle successful update
              } catch (error) {
                console.error('Error updating booking record:', error);
                // Handle error
              }



        }




      };


// Event - Request Full Refund
const RequestedEventFullRefund = async() => { 



  if(refundReason == "")
  {
    //Validation message 
    const reasonValidationMessage = "Please enter a reason"
    setRefundReasonErrorMessage(reasonValidationMessage);
  }
  else{

        const selectedBookingTypeRecordID = `http://localhost:3000/api/fullRefundRequest/${selectedEventBookingRecord._id}`;

        // Update Status so that it changes on the Record from Booked to Full Refund Request Sent 
        // Update Person AttendanceStatus value 


  const jwtToken = await AsyncStorage.getItem('jwtToken');


      try {
          const response = await fetch(selectedBookingTypeRecordID, {
              method: 'PUT',
              headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${jwtToken}`,
              },
              body: JSON.stringify({
                // Include the data you want to send in the body
                // For example:
                _id: selectedBookingTypeRecordID._id,
                participantID: value,
                reasonForRefund: refundReason
                // Other properties...

            })
             
          });


// Notify Admin  HERE WHEN WE GET THE notifcations ? ? 

      
          const updatedRecord = await response.json();
        
          if(updatedRecord == null)
          {
            setRefundModalVisible(true);
          }
          else{
            

            setRefundModalVisible(false);
            navigation.navigate('DashboardCRM');
          }

          if (!response.ok) {
            throw new Error('Failed to update booking record');
          }
          // Handle successful update
        } catch (error) {
          console.error('Error updating booking record:', error);
          // Handle error
        }



  }




};



    
   

// Define initial values
const initialValue = []; // Provide an initial value for 'value' state
const initialItems = []; // Provide an initial value for 'items' state

const [open, setOpen] = useState(false);
const [value, setValue] = useState(initialValue);
const [items, setItems] = useState(initialItems);

const [selectedBookingRecord, setSelectedBookingRecord]= useState();
const [selectedParticipantID, setSelectedParticipantID] = useState(initialValue);



const [selectedEventBookingRecord, setSelectedEventBookingRecord]= useState();



// Usage example of setValue
const updateValue = (newValue) => {
  setValue(newValue);
};

// Usage example of setItems
const updateItems = (newItems) => {
  setItems(newItems);
};

const renderParticipantItem = ({ item: participant }) => (
  <View style={{ marginTop: 10 }}>
    <Text>Participant Name: {participant.name}</Text>
    <Text>Participant Age: {participant.age}</Text>
    <Text>Participant Allergies: {participant.allergies || 'None'}</Text>
    {participant.daysSelectedArray.length > 0 ? (
      <View>
        <Text>Selected Days:</Text>
        <FlatList
          data={participant.daysSelectedArray}
          keyExtractor={(day, index) => index.toString()}
          renderItem={({ item: day }) => (
            <Text key={day}>{day}</Text>
          )}
        />
      </View>
    ) : (
      <Text>No selected days</Text>
    )}
  </View>
);



const renderEventParticipantItem = ({ item: participant }) => (
  <View style={{ marginTop: 10 }}>
    <Text>Participant Name: {participant.name}</Text>
    <Text>Participant Age: {participant.age}</Text>
    <Text>Participant Allergies: {participant.allergies || 'None'}</Text>
  </View>
);







return (





<ScrollView>
 
{/* Menu Options - 2 buttons Camp and Event , if true it will display respective lists */}
       {/* Conditional rendering based on the state */}
       {viewCampBookings ? (
        <View>
          {/* Display this view if viewCampBookings is true */}
          <View style={styles.buttonContainer}>
            <TouchableOpacity style={styles.button1} onPress={openEventBookings}>
              <Text style={styles.buttonText}>View Event Bookings</Text>
            </TouchableOpacity>
        </View>







<View>

      {(!bookingCampData || !Array.isArray(bookingData)) ? (
        <Text>No Bookings</Text>
      ) : (

        
        // If both are defined and bookingData is an array, proceed with rendering
        bookingCampData.map((camp, index) => (
          <View key={index} style={styles.container}>
          <Text>{camp.campName} </Text>
            <Text>Location: {camp.location}</Text>
            <Text>Duration: {new Date(camp.startDate).toLocaleDateString('en-GB')} - {new Date(camp.endDate).toLocaleDateString('en-GB')}</Text>
            <Text>Start Time: {new Date(camp.startTime).toLocaleTimeString()} - End Time: {new Date(camp.endTime).toLocaleTimeString()}</Text>

            {/* Check if bookingData is not undefined or empty */}
            {bookingData && bookingData.length > 0 && bookingData.filter(booking => booking.campID === camp._id).map((booking, bookingIndex) => (
              <View key={bookingIndex}>
                <Text>Status: {booking.bookingStatus}</Text>
                <Text>Booking ID: {booking._id}</Text>
                <Text>Participants: {booking.participantsBooked}</Text>
                <Text>Booking Price: Â£{booking.price}</Text>
                
                <View>
                {/* This button make a modal appear and Render participant details for each booking */}
                   <View style={styles.buttonContainer}>
                      <TouchableOpacity style={styles.button1} onPress={() => openCampBookingDetailsModal(booking)}>
                        <Text style={styles.buttonText}> View Booking Details</Text>
                      </TouchableOpacity>
                    </View>

                    <View>
                      <TouchableOpacity style={styles.button1} onPress={() => RequestCampRefundCancellationModalVisible(booking)}>
                        <Text style={styles.buttonText}>View Refund Options</Text>
                      </TouchableOpacity>
                    </View>

                </View>
          




          {/* Modal  */}       
          <Modal
            animationType="slide"
            transparent={true}
            visible={bookingDetailsModalVisible}
            onRequestClose={closeBookingDetailsModal}
          >
          <View style={styles.modalContainer}>
            <View style={styles.modalContent}>
              <View style={{ flexDirection: 'column' }}>
          {/* Render participant details for the selected booking */}
          {selectedBookingRecord && selectedBookingRecord.participantArray ? (
          <FlatList
            data={selectedBookingRecord.participantArray}
            keyExtractor={(participant, index) => index.toString()}
            renderItem={renderParticipantItem}
          />
        ) : (
          <Text>No data available</Text>
        )}
                </View>
                    <View>
                      <TouchableOpacity style={styles.button1} onPress={closeBookingDetailsModal}>
                        <Text style={styles.buttonText}>Close</Text>
                      </TouchableOpacity>
                    </View>
                </View>

              </View>
          </Modal>
             </View>
              
            ))}

            
          </View>
        ))



      )}
    </View>



          {/* Modal  */}
          <Modal
            animationType="slide"
            transparent={true}
            visible={refundModalVisible}
            onRequestClose={closeCampRefundModal}

          >
            <View style={styles.modalContainer}>
              <View style={styles.modalContent}>
                <View style={{ flexDirection: 'column' }}>
                  <Text style={styles.label}>Reason for cancellation / Refund request: *</Text>
                  <Text style={styles.validationText}>{refundReasonErrorMessage}</Text>
                  <TextInput
                    style={styles.textInput}
                    placeholder='Enter here..'
                    onChangeText= {(text) => setRefundReason(text)}
                  />
                </View>

                <View style={{ flexDirection: 'column' }}>
                  <Text>Please select the participants you would like to request to refund / cancel or Press the "Full Refund" button to request a full refund</Text>
                </View>

                {/* Participant selection */}
                <View style={styles.dropdownContainer}>
                  <Text style={styles.label}>Participant lists</Text>
                   {/* Dropdown for selecting participant */}
                  <View style={styles.dropdownContainer}>
                    <DropDownPicker
                      open={open}
                      value={value}
                      setOpen={setOpen}
                      setValue={updateValue}
                      setItems={updateItems}
                      placeholder={'Choose a participant'}
                      multiple={true}
                      mode="BADGE"
                      badgeDotColors={["#e76f51", "#00b4d8", "#e9c46a", "#e76f51", "#8ac926", "#00b4d8", "#e9c46a"]}


                      items={selectedBookingRecord?.participantArray.map(participant => ({ 
                        label: participant.name, 
                        value: participant._id 
                      })) || []}
                      containerStyle={styles.dropdown}
                    />
                  </View>
                  
                 </View>

              <View>
              {value.length > 0 && (
                  <View>


                              <View style={styles.buttonContainer}>
                                  <TouchableOpacity style={styles.button1} onPress={openCampFullRefundConfirmationModal}>
                                    <Text style={styles.buttonText}>Request Full Refund</Text>
                                  </TouchableOpacity>
                               </View>
                              <View style={styles.buttonContainer}>
                                    <TouchableOpacity style={styles.button1} onPress={openCampPartialRefundConfirmationModal}>
                                      <Text style={styles.buttonText}>Request Partial Refund</Text>
                                    </TouchableOpacity>
                                </View>

                                <View style={styles.buttonContainer}>
                                  <TouchableOpacity style={styles.button1} onPress={closeCampRefundModal}>
                                    <Text style={styles.buttonText}>Exit</Text>
                                  </TouchableOpacity>
                                </View>

                 </View>

              )}

                {value.length <=0 && (
             

                          <View>
                               <View style={styles.buttonContainer}>
                                  <TouchableOpacity style={styles.button1} onPress={openCampFullRefundConfirmationModal}>
                                    <Text style={styles.buttonText}>Request Full Refund</Text>
                                  </TouchableOpacity>
                               </View>
                            
                               <View style={styles.buttonContainer}>
                                  <TouchableOpacity style={styles.button1} onPress={closeCampRefundModal}>
                                    <Text style={styles.buttonText}>Exit</Text>
                                  </TouchableOpacity>
                               </View>
                          </View> 


               )} 

                              </View>

                             </View> 
                      </View>
                                              
                     </Modal> 
                      
  

         {/* CAMP - Full Refund Modal - Refund Confirmation*/}

                     <Modal
                          animationType="slide"
                          transparent={true}
                          visible={refundCampFullRefundConfirmationModalVisible}
                          onRequestClose={closeCampFullRefundConfirmationModal}

                        >
                        <View style={styles.modalContainer}>
                                    <View style={styles.modalContent}>
                                      <View>
                                      <View style={styles.buttonContainer}>

                                      <Text style={styles.label}> Are you sure you want to request a refund?</Text>
                                          <TouchableOpacity style={styles.button1} onPress={CampRequestFullRefund}>
                                            <Text style={styles.buttonText}>Yes</Text>
                                          </TouchableOpacity>
                                      </View>
                                    
                                      <View style={styles.buttonContainer}>
                                          <TouchableOpacity style={styles.button1} onPress={closeCampFullRefundConfirmationModal}>
                                            <Text style={styles.buttonText}>No</Text>
                                          </TouchableOpacity>
                                      </View>
                        </View> 

                      </View>
                </View>
                          


          </Modal>


         {/* CAMP - Partial Refund Modal - Refund Confirmation*/}

                        <Modal
                          animationType="slide"
                          transparent={true}
                          visible={refundCampPartialRefundConfirmationModalVisible}
                          onRequestClose={closeCampPartialRefundConfirmationModal}

                        >
                        <View style={styles.modalContainer}>
                                    <View style={styles.modalContent}>
                                      <View>
                                      <View style={styles.buttonContainer}>

                                      <Text style={styles.label}> Are you sure you want to request a refund?</Text>
                                          <TouchableOpacity style={styles.button1} onPress={CampRequestPartialRefund}>
                                            <Text style={styles.buttonText}>Yes</Text>
                                          </TouchableOpacity>
                                      </View>
                                    
                                      <View style={styles.buttonContainer}>
                                          <TouchableOpacity style={styles.button1} onPress={closeCampPartialRefundConfirmationModal}>
                                            <Text style={styles.buttonText}>No</Text>
                                          </TouchableOpacity>
                                      </View>
                        </View> 

                      </View>
                </View>
                          


          </Modal>
   
        
        </View>
      ) : (
      

        //Event bookings 
      <View>

        <View style={styles.buttonContainer}>
          {/* Display this view if viewCampBookings is false */}
          <TouchableOpacity style={styles.button1} onPress={openCampBookings}>
            <Text style={styles.buttonText}>View Camp Bookings</Text>
          </TouchableOpacity>
        </View>

        
    {bookingEventData && bookingEventData.length > 0 ? (
      bookingEventData.map((event, index) => (
        <View key={index} style={styles.container}>
          <Text>{event.eventName}</Text>
          <Text>Location: {event.location}</Text>
          <Text>Duration: {new Date(event.startDate).toLocaleDateString('en-GB')}</Text>
          <Text>Start Time: {new Date(event.startTime).toLocaleTimeString()} - End Time: {new Date(event.endTime).toLocaleTimeString()}</Text>
          <Text>Price: Â£{event.price}</Text>
          {/* You can add more event details here */}

            {/* Check if bookingData is not undefined or empty */}
              {bookingData && bookingData.length > 0 && bookingData.filter(booking => booking.eventID === event._id).map((booking, bookingIndex) => (
                <View key={bookingIndex}>
                  <Text>Status: {booking.bookingStatus}</Text>
                  <Text>Booking ID: {booking._id}</Text>
                  <Text>Participants: {booking.participantsBooked}</Text>
                  <Text>Booking Price: Â£{booking.price}</Text>

                  <View style={styles.buttonContainer}>
                    <TouchableOpacity style={styles.button1} onPress={() => openEventBookingDetailsModal(booking)}>
                      <Text style={styles.buttonText}> View Booking Details</Text>
                    </TouchableOpacity>
                  </View>

                  <View>
                    <TouchableOpacity style={styles.button1} onPress={() => RequestEventRefundCancellationModalVisible(booking)}>
                      <Text style={styles.buttonText}>View Refund Options</Text>
                    </TouchableOpacity>
                  </View>
                </View>

                
              )

       
              
              )}


              
                  

        </View>
      ))

//Modal - View Event Details 


  


    ) : (
      <Text>No Event Bookings</Text>
    )}

       {/* Modal  */}       
       <Modal
            animationType="slide"
            transparent={true}
            visible={bookingEventDetailsModalVisible}
            onRequestClose={closeBookingEventDetailsModal}
          >
          <View style={styles.modalContainer}>
            <View style={styles.modalContent}>
              <View style={{ flexDirection: 'column' }}>
          {/* Render participant details for the selected booking */}
          {selectedEventBookingRecord && selectedEventBookingRecord.participantArray ? (
          <FlatList
            data={selectedEventBookingRecord.participantArray}
            keyExtractor={(participant, index) => index.toString()}
            renderItem={renderEventParticipantItem}
          />
        ) : (
          <Text>No data available</Text>
        )}
                </View>
                    <View>
                      <TouchableOpacity style={styles.button1} onPress={closeBookingEventDetailsModal}>
                        <Text style={styles.buttonText}>Close</Text>
                      </TouchableOpacity>
                    </View>
                </View>

              </View>
          </Modal>
      {/* Modal for displaying event details */}
      <Modal
          animationType="slide"
          transparent={true}
          visible={refundEventModalVisible}
          onRequestClose={closeEventRefundModal}
        >
          <View style={styles.modalContainer}>
            <View style={styles.modalContent}>
                <View style={{ flexDirection: 'column' }}>
                  <Text style={styles.label}>Reason for cancellation / Refund request: *</Text>
                  <Text style={styles.validationText}>{refundReasonErrorMessage}</Text>
                  <TextInput
                    style={styles.textInput}
                    placeholder='Enter here..'
                    onChangeText= {(text) => setRefundReason(text)}
                  />
                </View>
                <View style={{ flexDirection: 'column' }}>
                  <Text>Please select the participants you would like to request to refund / cancel or Press the "Full Refund" button to request a full refund</Text>
                </View>

                 {/* Participant selection */}
                 <View style={styles.dropdownContainer}>
                  <Text style={styles.label}>Participant lists</Text>
                   {/* Dropdown for selecting participant */}
                  <View style={styles.dropdownContainer}>
                    <DropDownPicker
                      open={open}
                      value={value}
                      setOpen={setOpen}
                      setValue={updateValue}
                      setItems={updateItems}
                      placeholder={'Choose a participant'}
                      multiple={true}
                      mode="BADGE"
                      badgeDotColors={["#e76f51", "#00b4d8", "#e9c46a", "#e76f51", "#8ac926", "#00b4d8", "#e9c46a"]}


                      items={selectedEventBookingRecord?.participantArray.map(participant => ({ 
                        label: participant.name, 
                        value: participant._id 
                      })) || []}
                      containerStyle={styles.dropdown}
                    />
                  </View>
                  
                 </View>
                 <View>
              {value.length > 0 && (
                  <View>

                              <View style={styles.buttonContainer}>
                                  <TouchableOpacity style={styles.button1} onPress={openFullRefundEventConfirmationModal}>
                                    <Text style={styles.buttonText}>Request Full Refund</Text>
                                  </TouchableOpacity>
                               </View>
                              <View style={styles.buttonContainer}>
                                    <TouchableOpacity style={styles.button1} onPress={openPartialRefundEventConfirmationModal}>
                                      <Text style={styles.buttonText}>Request Partial Refund</Text>
                                    </TouchableOpacity>
                                </View>

                                <View style={styles.buttonContainer}>
                                  <TouchableOpacity style={styles.button1} onPress={closeEventRefundModal}>
                                    <Text style={styles.buttonText}> Exit</Text>
                                  </TouchableOpacity>
                                </View>

                 </View>

              )}

                {value.length <=0 && (
             

                          <View>
                               <View style={styles.buttonContainer}>
                                  <TouchableOpacity style={styles.button1} onPress={openFullRefundEventConfirmationModal}>
                                    <Text style={styles.buttonText}>Request Full Refund</Text>
                                  </TouchableOpacity>
                               </View>
                            
                               <View style={styles.buttonContainer}>
                                  <TouchableOpacity style={styles.button1} onPress={closeEventRefundModal}>
                                    <Text style={styles.buttonText}>Exit</Text>
                                  </TouchableOpacity>
                               </View>
                          </View> 


               )} 

                              </View>

                             </View> 
                      </View>
      
            
        </Modal>


                        {/* EVENT - Partial Refund Modal - Refund Confirmation*/}


                        <Modal
                          animationType="slide"
                          transparent={true}
                          visible={refundEventPartialRefundConfirmationModalVisible}
                          onRequestClose={closeEventPartialRefundConfirmationModal}

                        >
                        <View style={styles.modalContainer}>
                                    <View style={styles.modalContent}>
                                      <View>
                                      <View style={styles.buttonContainer}>

                                      <Text style={styles.label}> Are you sure you want to request a refund?</Text>
                                          <TouchableOpacity style={styles.button1} onPress={EventRequestPartialRefund}>
                                            <Text style={styles.buttonText}>Yes</Text>
                                          </TouchableOpacity>
                                      </View>
                                    
                                      <View style={styles.buttonContainer}>
                                          <TouchableOpacity style={styles.button1} onPress={closeEventPartialRefundConfirmationModal}>
                                            <Text style={styles.buttonText}>No</Text>
                                          </TouchableOpacity>
                                      </View>
                        </View> 

                      </View>
                </View>/
                          


          </Modal>

         {/* EVENT - Full Refund Modal - Refund Confirmation */}
                        <Modal
                          animationType="slide"
                          transparent={true}
                          visible={refundEventFullRefundConfirmationModalVisible}
                          onRequestClose={closeEventFullRefundConfirmationModal}

                        >
                        <View style={styles.modalContainer}>
                                    <View style={styles.modalContent}>
                                      <View>
                                      <View style={styles.buttonContainer}>

                                      <Text style={styles.label}>Are you sure you want to request a refund?</Text>
                                          <TouchableOpacity style={styles.button1} onPress={EventRequestFullRefund}>
                                            <Text style={styles.buttonText}>Yes</Text>
                                          </TouchableOpacity>
                                      </View>
                                    
                                      <View style={styles.buttonContainer}>
                                          <TouchableOpacity style={styles.button1} onPress={closeEventFullRefundConfirmationModal}>
                                            <Text style={styles.buttonText}>No</Text>
                                          </TouchableOpacity>
                                      </View>
                        </View> 

                      </View>
                </View>
                          


          </Modal>
  </View>

      )}





          </ScrollView>

                   
          
      );
    };
    
    const styles = StyleSheet.create({
      container: {
        borderWidth: 2,
        borderColor: '#ccc',
        padding: 20,
        margin: 20,
        width: 'auto',
      },
      validationText: {
        fontSize: 20,
        marginBottom: 10,
        color: 'red',
      },
      rowContainer: {
        flexDirection: 'row',
        alignItems: 'center',
      },
      columnContainer: {
        flexDirection: 'column',
        alignItems: 'center',
      },
       modalContainer: {
          flex: 1,
          justifyContent: 'center',
          alignItems: 'center',
          backgroundColor: 'rgba(0,0,0,0.5)',
        },
        modalContent: {
          backgroundColor: '#fff',
          padding: 20,
          borderRadius: 10,
           width: '80%',
        },
        fieldRow: {
          flexDirection: 'row',
           marginTop: 15,
           marginBottom: 10,
        },
        label: {
          // marginBottom: 5,
          fontWeight: 'bold',
        },
        textInput: {
          borderWidth: 1,
          borderColor: 'gray',
          padding: 10,
          marginTop: 10,
          marginBottom: 10,
        },
        buttonContainer:{
          marginTop:30
        },
        button: {
          backgroundColor: '#4CAF50',
          borderRadius: 4,
          padding: 10,
          marginBottom: 5,
          
        },
        button1: {
          backgroundColor: '#4CAF50',
          borderRadius: 4,
          padding: 10,
          zIndex: 2, // Ensure dropdown is above other elements
          marginBottom: 5,
         
        },
        buttonText: {
          color: 'white',
          fontSize: 16,
          textAlign: 'center',
        },
        containerd: {
          flex: 1,
          justifyContent: 'center',
          alignItems: 'center',
        },

        dropdownContainer: {
          position: 'relative',
          marginBottom: 30, // Adjust this value as needed to prevent overlap
          zIndex: 1, // Ensure dropdown is above other elements
        },
        dropdown: {
           position: 'absolute',
          zIndex: 1, // Ensure dropdown is above other elements
          width: '100%',
        },
        
    });
    
    export default MyBookings;